src_1.0.08_16/README.src.OpenMP:

The OpenMP directives allow HYCOM to run on multiple processors of
shared memory machines.  This mode of parallelization is typically
best for a relatively modest number of processors (2,3,4,6,8), 
although more can profitably be used on large grids.

The PARAMETER mxthrd has been added to dimensions.h.  Each outer
(i or j) loop is diviuded into mxthrd pieces by OpenMP.  So mxthrd 
should be a multiple of OMP_NUM_THREADS.  It is often best to set
mxthrd larger than OMP_NUM_THREADS, because that tends to give
better land/sea load balance between threads.  For example,
mxthrd=16 could be used with 2, 4, 8 or 16 threads.  Other good
choices are 12, 24, 32 etcetera.  Large values of mxthrd are only
likely to be optimal for large idm and jdm.

The directives have not yet been extensively tuned for optimal
performance on a wide range of machines, so please report cases
where one or more routines scale poorly in your environment.
Also send in any improvements to the OpenMP directives.

Parallel sums are not performed via an OpenMP REDUCTION clause, because
it is not bit for bit reproducable when run twice on the same data sets.  
Instead, row sums are done explicitly in parellel, followed by a serial 
sum of the row sums.  This is probably slower than REDUCTION, but it is 
bit for bit reproducable on any number of processors.  Please report 
any cases where HYCOM gives different answers for different values of 
OMP_NUM_THREADS (this is not supposed to happen).

As part of testing OpenMP performance, timers have been added around
all the high level routines.  This involves linking in a potentially
machine-specific wall clock time routine.  If Fortran 90 is being used, 
then wtime_f90.f contains a timer based on the SYSTEM_CLOCK intrinsic.
There are also two examples of C timers, wtime_sgi.c and wtime_sun.c.
Finally, wtime_dum.f always works but does no timing.  If obtaining
wall time is expensive,  wtime_dum.f should be used for production 
runs to avoid this overhead.
